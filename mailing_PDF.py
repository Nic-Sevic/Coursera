#!/usr/bin/env python3
# Premise: 
# You work for a company that sells second hand cars. Management wants to get a summary of the amounts of vehicles that have been sold at the end of every month. The company already has a web service which serves sales data at the end of every month but management wants an email to be sent out with an attached PDF so that data is more easily readable.
# Goals:
# - Write a script that summarizes and processes sales data into different categories
# - Generate a PDF using Python
# - Automatically send a PDF by email

import json
import locale
import sys
import reports
import emails

def load_data(filename):
  """Loads the contents of filename as a JSON file."""
  with open(filename) as json_file:
    data = json.load(json_file)
  return data

def format_car(car):
  """Given a car dictionary, returns a nicely formatted name."""
  return "{} {} ({})".format(car["car_make"], car["car_model"], car["car_year"])

def process_data(data):
  """Analyzes the data, looking for maximums.

  Returns a list of lines that summarize the information.
  """
  max_revenue = {"revenue": 0}
  for item in data:
    # Calculate the revenue generated by this model (price * total_sales)
    # We need to convert the price from "$1234.56" to 1234.56
    item_price = locale.atof(item["price"].strip("$"))
    item_revenue = item["total_sales"] * item_price
    if item_revenue > max_revenue["revenue"]:
      item["revenue"] = item_revenue
      max_revenue = item
    # TODO: also handle max sales; should account for ties but not being asked to
    sales = {'id': 0, 'total_sales': 0}
    if item['total_sales'] > sales['total_sales']:
      sales['id'] = item['id']
      sales['total_sales'] = item['total_sales']
    # TODO: also handle most popular car_year
    pop_car_year = {}
    pop_car_year[item['car']['car_year']] =+ item['total_sales']
    sorted_pop_car_year = sorted(pop_car_year.items(), key=lambda x: x[1], reverse=True)

  summary = [
    "The {} generated the most revenue: ${}".format(format_car(max_revenue["car"]), max_revenue["revenue"]),
    "The {} had the most sales: {}".format(format_car(data[sales["id"]-1]["car"]), sales["total_sales"]),
    "The most popular year was {} with {} sales.".format(sorted_pop_car_year[0][0], sorted_pop_car_year[0][1])
  ]

  return summary

def cars_dict_to_table(car_data):
  """Turns the data in car_data into a list of lists."""
  table_data = [["ID", "Car", "Price", "Total Sales"]]
  for item in car_data:
    table_data.append([item["id"], format_car(item["car"]), item["price"], item["total_sales"]])
  return table_data

def main(argv):
  """Process the JSON data and generate a full report out of it."""
  data = load_data("car_sales.json")
  summary = process_data(data)
  print(summary)
  # TODO: turn this into a PDF report
  reports.generate("/tmp/cars.pdf", "Sales summary for last month", "<br/>".join(summary), cars_dict_to_table(data))

  # TODO: send the PDF report as an email attachment
  message = emails.generate('automation@example.com', 'student@example.com', 'Sales summary for last month', '\n'.join(summary), '/tmp/cars.pdf')
  emails.send(message)
if __name__ == "__main__":
  main(sys.argv)
